package demo18;

/**
 * @program: java_example
 * @description: 观察者模式-测试类
 * @author: yangchenglong
 * @create: 2019-07-24 16:49
 */
public class Test {

    //意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
    //主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。
    //何时使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。
    //如何解决：使用面向对象技术，可以将这种依赖关系弱化。
    //关键代码：在抽象类里有一个 ArrayList 存放观察者们。

    //使用场景：
    //1、一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。
    //2、一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。
    //3、一个对象必须通知其他对象，而并不知道这些对象是谁。
    //4、需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。

    //注意事项： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。

    //拍卖师拍卖时，会通知所有买家物品价格变化，当买家离场后，就收不到价格通知了

    public static void main(String[] args) {
        Auctioneer subject = new Auctioneer();//被观察者

        Observer buyer1 = new Buyer("张三");
        Observer buyer2 = new Buyer("李四");

        //添加观察者
        subject.addObserver(buyer1);
        subject.addObserver(buyer2);
        subject.setMsg("第一件物品起拍价200元");

        System.out.println("----------------------------------------------");

        subject.removeObserver(buyer1);//移除一个观察者
        subject.setMsg("第二件物品起拍价500元");

    }

}
